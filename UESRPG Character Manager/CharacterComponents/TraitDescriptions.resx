<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Amphibious" xml:space="preserve">
    <value>The character can breathe water, and ignores the skill cap placed on his combat rolls by his Athletics skill when fighting in water.</value>
  </data>
  <data name="DarkSight" xml:space="preserve">
    <value>A character with this trait can see normally even in areas with total darkness, and never takes penalties for acting in areas with dim or no lighting.</value>
  </data>
  <data name="DiseaseResistance" xml:space="preserve">
    <value>Characters with this trait have a chance to resist diseases. Whenever the character would be infected by a common disease, roll a d100. If the roll is less than or equal to X, the character doesn’t get the disease.</value>
  </data>
  <data name="HeavyHitter" xml:space="preserve">
    <value>The character is larger or heavier than other creatures within its same size category, and thus there is more force behind each of its blows. Add X to the character’s Damage Bonus.</value>
  </data>
  <data name="Immunity" xml:space="preserve">
    <value>The character is immune to any of the effects of the thing specified in parenthesis. The character may have multiple instances of this trait for different effects *.</value>
  </data>
  <data name="PowerWell" xml:space="preserve">
    <value>Characters with this trait have more magicka than usual. The size of their Magicka Pool is increased by X% of its base. If the character would receive this trait twice, combine the X values.</value>
  </data>
  <data name="RacialInscrutable" xml:space="preserve">
    <value>Argonians receive a -10 penalty to Charm tests made to interact with non-Argonians. However, Observe tests made to try to distinguish their motives are made with a -10 penalty.</value>
  </data>
  <data name="RacialMentalStrength" xml:space="preserve">
    <value>Altmer ignore penalties to Willpower tests made to resist paralysis.</value>
  </data>
  <data name="RacialNaturalArchers" xml:space="preserve">
    <value>Bosmer never suffer untrained penalties worse than -10 when using bows or crossbows.</value>
  </data>
  <data name="RacialStarOfTheWest" xml:space="preserve">
    <value>Imperials increase their Stamina by 1.</value>
  </data>
  <data name="Resistance" xml:space="preserve">
    <value>Characters with this trait are resistant to a certain damage type, such as rending damage, or magic damage. The damage type is specified in *. If the character suffers damage after armor mitigation with the damage type *, reduce that damage by X% (round up) before calculating the effects of the damage. Instances of magic resistance stack with specific damage type resistances. If a character has both this trait and the weakness trait for the same damage type, then simply ignore the smaller value and treat the larger one as having an X% value equal to the difference between the two.

The character also gains a +X bonus to Endurance tests to resist environmental effects stemming from sources of the listed type. This can be invoked if, for example, the character needs to make a journey through an extremely hot desert (fire), or resist the effects of a blizzard (frost). When this applies is left to the GM to decide.

Characters with Resistance (Magic, X%) also reduce non-damaging magic effects from an external source by the listed percentage (for example: reducing the duration of a disabling spell by 50%). It’s up to the GM to apply this on a case by case basis.</value>
  </data>
  <data name="Tough" xml:space="preserve">
    <value>The character is larger or heavier than other creatures within its same size category, and thus can take more punishment. Increase the character’s Health by X% of its base value (round down).</value>
  </data>
  <data name="Weakness" xml:space="preserve">
    <value>Characters with this trait are weak to a certain damage type, such as rending damage, fire damage, magic damage, and so forth. The damage type is specified in *. If the character suffers damage after armor mitigation with the damage type *, increase that damage by X% (round up) before calculating the effects of the damage. Instances of magic weakness stack with specific damage type weakness.

If a character has both this trait and the resistance trait for the same damage type, then simply ignore the smaller value and treat the larger one as having an X% value equal to the difference
between the two.

The character also suffers a -X penalty to Endurance tests to resist environmental effects stemming from sources of the listed type. This can be invoked if, for example, the character needs to make a journey through an extremely hot desert (fire), or resist the effects of a blizzard (frost). When this applies is left to the GM to decide.

Characters with Weakness (Magic, X%) also increase non-damaging magic effects from an external source by the listed percentage (for example: increasing the duration of a disabling spell by 50%). It’s up to the GM to apply this on a case by case basis.</value>
  </data>
</root>